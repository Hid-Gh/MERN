{"ast":null,"code":"var _jsxFileName = \"/Users/hidaya/travel/src/components/PrivateRoutes.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport AuthService from './AuthService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoutes = _ref => {\n  _s();\n  let {} = _ref;\n  const isAuthenticated = AuthService.isAuthenticated();\n  const {\n    id\n  } = useParams();\n  return isAuthenticated ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\",\n    replace: true,\n    state: {\n      id\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n//   const isAuthenticated = AuthService.isAuthenticated();\n//   return (\n\n//           isAuthenticated ? <Outlet/> : <Navigate to=\"/login\" />\n\n//   );\n// };\n_s(PrivateRoutes, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", true);\n_c = PrivateRoutes;\nexport default PrivateRoutes;\n\n// import React from 'react';\n// import { Navigate, Outlet } from 'react-router-dom';\n// const PrivateRoute = () => {\n//     const auth = null; // determine if authorized, from context or however you're doing it\n//     // If authorized, return an outlet that will render child elements\n//     // If not, return element that will navigate to login page\n//     return auth ? <Outlet /> : <Navigate to=\"/login\" />;\n// }\n// export default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoutes\");","map":{"version":3,"names":["React","Navigate","Outlet","AuthService","jsxDEV","_jsxDEV","PrivateRoutes","_ref","_s","isAuthenticated","id","useParams","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","state","_c","$RefreshReg$"],"sources":["/Users/hidaya/travel/src/components/PrivateRoutes.js"],"sourcesContent":["import React from 'react';\nimport { Navigate,Outlet} from 'react-router-dom';\nimport AuthService from './AuthService';\n\nconst PrivateRoutes = ({}) => {\n  const isAuthenticated = AuthService.isAuthenticated();\n  const { id } = useParams();\n\n  return isAuthenticated ? (\n    <Outlet />\n  ) : (\n    <Navigate to=\"/login\" replace state={{ id }} />\n  );\n};\n//   const isAuthenticated = AuthService.isAuthenticated();\n//   return (\n    \n//           isAuthenticated ? <Outlet/> : <Navigate to=\"/login\" />\n      \n//   );\n// };\n\nexport default PrivateRoutes;\n\n// import React from 'react';\n// import { Navigate, Outlet } from 'react-router-dom';\n// const PrivateRoute = () => {\n//     const auth = null; // determine if authorized, from context or however you're doing it\n//     // If authorized, return an outlet that will render child elements\n//     // If not, return element that will navigate to login page\n//     return auth ? <Outlet /> : <Navigate to=\"/login\" />;\n// }\n// export default PrivateRoute;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAACC,MAAM,QAAO,kBAAkB;AACjD,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,aAAa,GAAGC,IAAA,IAAQ;EAAAC,EAAA;EAAA,IAAP,CAAC,CAAC,GAAAD,IAAA;EACvB,MAAME,eAAe,GAAGN,WAAW,CAACM,eAAe,CAAC,CAAC;EACrD,MAAM;IAAEC;EAAG,CAAC,GAAGC,SAAS,CAAC,CAAC;EAE1B,OAAOF,eAAe,gBACpBJ,OAAA,CAACH,MAAM;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAEVV,OAAA,CAACJ,QAAQ;IAACe,EAAE,EAAC,QAAQ;IAACC,OAAO;IAACC,KAAK,EAAE;MAAER;IAAG;EAAE;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAC/C;AACH,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AAAAP,EAAA,CAhBMF,aAAa;AAAAa,EAAA,GAAbb,aAAa;AAkBnB,eAAeA,aAAa;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}